name: 'GRPC composite action'
description: 'A composite action to handle building and uploading GRPC artifactes for python and CPP'

inputs:
  # new-tag:
  #   required: true
  #   description: 'The new tag to push'
  proto-folder:
    required: true
    description: 'Path of protofile'
    default: './'
  proto-file:
      required: true
      description: 'protofile name'
  arch:
    required: true
    description: 'The package arch'
    default: x86_64
    
outputs:
  cpp_artifact:
    description: 'The new artifact names'
    value: ${{ steps.echo_name.outputs.cpp_artifact }}
  python_artifact:
      description: 'The new artifact names'
      value: ${{ steps.echo_name.outputs.python_artifact }}
    
runs:
    using: "composite"
    steps:
      - name: Compile proto file for CPP
        # working-directory: ${{ inputs.proto-folder }}/cpp-generated
        shell: bash
        run: |
          mkdir -p ${{ inputs.proto-folder }}/cpp-generated
          cd ${{ inputs.proto-folder }}/cpp-generated
          protoc -I=. --proto_path=../ --cpp_out=./ ../${{ inputs.proto-file }}
          protoc -I=. --grpc_out=. --plugin=protoc-gen-grpc=`which grpc_cpp_plugin` --proto_path=.. ../${{ inputs.proto-file }}
              
      - name: Upload compiled proto files
        uses: actions/upload-artifact@v2
        with:
          name: cpp_generated
          path: ./cpp-generated

      - name: Compile proto file for Python
        # working-directory: ${{ inputs.proto-folder }}/python-generated
        shell: bash
        run: |
          mkdir -p ${{ inputs.proto-folder }}/python-generated
          cd ${{ inputs.proto-folder }}/python-generated
          protoc -I=. --proto_path=../ --python_out=./ ../${{ inputs.proto-file }}
          protoc -I=. --grpc_out=. --plugin=protoc-gen-grpc=`which grpc_python_plugin` --proto_path=.. ../${{ inputs.proto-file }}

      - name: Upload compiled proto files
        uses: actions/upload-artifact@v2
        with:
          name: python_generated
          path: ./python-generated

      - name: Echo package name
        working-directory: ${{ inputs.proto-folder }}
        id: echo_name
        shell: bash
        run: |
          echo "{cpp_artifact}={$(ls -la ./cpp-generated | grep pb | awk {'print $NF'})}" >> $GITHUB_OUTPUT
          echo "{python_artifact}={$(ls -la ./python-generated | grep pb | awk {'print $NF'})}" >> $GITHUB_OUTPUT
